<?php
/**
 * File for class PayPalStructSubscriptionInfoType
 * @package PayPal
 * @subpackage Structs
 * @date 2013-09-04
 * @author Mikaël DELSOL <contact@wsdltophp.com>
 */
/**
 * This class stands for PayPalStructSubscriptionInfoType originally named SubscriptionInfoType
 * Documentation : SubscriptionInfoType Information about a PayPal Subscription. ID generated by PayPal for the subscriber. Character length and limitations: no limit
 * Meta informations extracted from the WSDL
 * - from schema : {@link https://www.paypalobjects.com/wsdl/eBLBaseComponents.xsd}
 * @package PayPal
 * @subpackage Structs
 * @date 2013-09-04
 * @author Mikaël DELSOL <contact@wsdltophp.com>
 */
class PayPalStructSubscriptionInfoType extends PayPalWsdlClass
{
	/**
	 * The reattempt
	 * Meta informations extracted from the WSDL
	 * - use : required
	 * @var string
	 */
	public $reattempt;
	/**
	 * The recurring
	 * Meta informations extracted from the WSDL
	 * - use : required
	 * @var string
	 */
	public $recurring;
	/**
	 * The SubscriptionID
	 * @var string
	 */
	public $SubscriptionID;
	/**
	 * The SubscriptionDate
	 * Meta informations extracted from the WSDL
	 * - documentation : Subscription start date
	 * - minOccurs : 0
	 * @var dateTime
	 */
	public $SubscriptionDate;
	/**
	 * The EffectiveDate
	 * Meta informations extracted from the WSDL
	 * - documentation : Date when the subscription modification will be effective
	 * - minOccurs : 0
	 * @var dateTime
	 */
	public $EffectiveDate;
	/**
	 * The RetryTime
	 * Meta informations extracted from the WSDL
	 * - documentation : Date PayPal will retry a failed subscription payment
	 * - minOccurs : 0
	 * @var dateTime
	 */
	public $RetryTime;
	/**
	 * The Username
	 * Meta informations extracted from the WSDL
	 * - documentation : Username generated by PayPal and given to subscriber to access the subscription. Character length and limitations: 64 alphanumeric single-byte characters
	 * - minOccurs : 0
	 * @var string
	 */
	public $Username;
	/**
	 * The Password
	 * Meta informations extracted from the WSDL
	 * - documentation : Password generated by PayPal and given to subscriber to access the subscription. For security, the value of the password is hashed. Character length and limitations: 128 alphanumeric single-byte characters
	 * - minOccurs : 0
	 * @var string
	 */
	public $Password;
	/**
	 * The Recurrences
	 * Meta informations extracted from the WSDL
	 * - documentation : The number of payment installments that will occur at the regular rate. Character length and limitations: no limit
	 * - minOccurs : 0
	 * @var string
	 */
	public $Recurrences;
	/**
	 * The Terms
	 * Meta informations extracted from the WSDL
	 * - documentation : Subscription duration and charges
	 * - maxOccurs : unbounded
	 * - minOccurs : 0
	 * @var PayPalStructSubscriptionTermsType
	 */
	public $Terms;
	/**
	 * Constructor method for SubscriptionInfoType
	 * @see parent::__construct()
	 * @param string $_reattempt
	 * @param string $_recurring
	 * @param string $_subscriptionID
	 * @param dateTime $_subscriptionDate
	 * @param dateTime $_effectiveDate
	 * @param dateTime $_retryTime
	 * @param string $_username
	 * @param string $_password
	 * @param string $_recurrences
	 * @param PayPalStructSubscriptionTermsType $_terms
	 * @return PayPalStructSubscriptionInfoType
	 */
	public function __construct($_reattempt,$_recurring,$_subscriptionID = NULL,$_subscriptionDate = NULL,$_effectiveDate = NULL,$_retryTime = NULL,$_username = NULL,$_password = NULL,$_recurrences = NULL,$_terms = NULL)
	{
		parent::__construct(array('reattempt'=>$_reattempt,'recurring'=>$_recurring,'SubscriptionID'=>$_subscriptionID,'SubscriptionDate'=>$_subscriptionDate,'EffectiveDate'=>$_effectiveDate,'RetryTime'=>$_retryTime,'Username'=>$_username,'Password'=>$_password,'Recurrences'=>$_recurrences,'Terms'=>$_terms));
	}
	/**
	 * Get reattempt value
	 * @return string
	 */
	public function getReattempt()
	{
		return $this->reattempt;
	}
	/**
	 * Set reattempt value
	 * @param string $_reattempt the reattempt
	 * @return string
	 */
	public function setReattempt($_reattempt)
	{
		return ($this->reattempt = $_reattempt);
	}
	/**
	 * Get recurring value
	 * @return string
	 */
	public function getRecurring()
	{
		return $this->recurring;
	}
	/**
	 * Set recurring value
	 * @param string $_recurring the recurring
	 * @return string
	 */
	public function setRecurring($_recurring)
	{
		return ($this->recurring = $_recurring);
	}
	/**
	 * Get SubscriptionID value
	 * @return string|null
	 */
	public function getSubscriptionID()
	{
		return $this->SubscriptionID;
	}
	/**
	 * Set SubscriptionID value
	 * @param string $_subscriptionID the SubscriptionID
	 * @return string
	 */
	public function setSubscriptionID($_subscriptionID)
	{
		return ($this->SubscriptionID = $_subscriptionID);
	}
	/**
	 * Get SubscriptionDate value
	 * @return dateTime|null
	 */
	public function getSubscriptionDate()
	{
		return $this->SubscriptionDate;
	}
	/**
	 * Set SubscriptionDate value
	 * @param dateTime $_subscriptionDate the SubscriptionDate
	 * @return dateTime
	 */
	public function setSubscriptionDate($_subscriptionDate)
	{
		return ($this->SubscriptionDate = $_subscriptionDate);
	}
	/**
	 * Get EffectiveDate value
	 * @return dateTime|null
	 */
	public function getEffectiveDate()
	{
		return $this->EffectiveDate;
	}
	/**
	 * Set EffectiveDate value
	 * @param dateTime $_effectiveDate the EffectiveDate
	 * @return dateTime
	 */
	public function setEffectiveDate($_effectiveDate)
	{
		return ($this->EffectiveDate = $_effectiveDate);
	}
	/**
	 * Get RetryTime value
	 * @return dateTime|null
	 */
	public function getRetryTime()
	{
		return $this->RetryTime;
	}
	/**
	 * Set RetryTime value
	 * @param dateTime $_retryTime the RetryTime
	 * @return dateTime
	 */
	public function setRetryTime($_retryTime)
	{
		return ($this->RetryTime = $_retryTime);
	}
	/**
	 * Get Username value
	 * @return string|null
	 */
	public function getUsername()
	{
		return $this->Username;
	}
	/**
	 * Set Username value
	 * @param string $_username the Username
	 * @return string
	 */
	public function setUsername($_username)
	{
		return ($this->Username = $_username);
	}
	/**
	 * Get Password value
	 * @return string|null
	 */
	public function getPassword()
	{
		return $this->Password;
	}
	/**
	 * Set Password value
	 * @param string $_password the Password
	 * @return string
	 */
	public function setPassword($_password)
	{
		return ($this->Password = $_password);
	}
	/**
	 * Get Recurrences value
	 * @return string|null
	 */
	public function getRecurrences()
	{
		return $this->Recurrences;
	}
	/**
	 * Set Recurrences value
	 * @param string $_recurrences the Recurrences
	 * @return string
	 */
	public function setRecurrences($_recurrences)
	{
		return ($this->Recurrences = $_recurrences);
	}
	/**
	 * Get Terms value
	 * @return PayPalStructSubscriptionTermsType|null
	 */
	public function getTerms()
	{
		return $this->Terms;
	}
	/**
	 * Set Terms value
	 * @param PayPalStructSubscriptionTermsType $_terms the Terms
	 * @return PayPalStructSubscriptionTermsType
	 */
	public function setTerms($_terms)
	{
		return ($this->Terms = $_terms);
	}
	/**
	 * Method called when an object has been exported with var_export() functions
	 * It allows to return an object instantiated with the values
	 * @see PayPalWsdlClass::__set_state()
	 * @uses PayPalWsdlClass::__set_state()
	 * @param array $_array the exported values
	 * @return PayPalStructSubscriptionInfoType
	 */
	public static function __set_state(array $_array,$_className = __CLASS__)
	{
		return parent::__set_state($_array,$_className);
	}
	/**
	 * Method returning the class name
	 * @return string __CLASS__
	 */
	public function __toString()
	{
		return __CLASS__;
	}
}
?>